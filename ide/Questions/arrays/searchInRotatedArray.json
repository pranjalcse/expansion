{
    "name": "Search in Rotated Sorted Array",
    "questionText": "There is an integer array nums sorted in ascending order (with distinct values).<br><br>Prior to being given to you, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].<br><br>Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.<br><br>You must write an algorithm with O(log n) runtime complexity.",
    "constraints":"<ul><li>1 <= nums.length <= 5000</li><li>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></li><li>All values of nums are unique</li></ul>",
    "inputFormat": "<ul><li>A single integer N (size of the array)</li><li>N space separated integers(elements of the array)</li><li>A single integer(target)</li></ul>",
    "outputFormat": "A single integers",
    "sampleinput": "7<br>4 5 6 7 0 1 2<br>0",
    "sampleoutput": "4",
    "explanation": "0 is present at index 4",
    "testCases": [
      {
        "input": "9 5 6 7 8 9 10 1 2 3 9",
        "output": "4"
      },
      {
        "input": "5 1 2 3 4 5 1",
        "output": "0"
      },
      {
        "input": "3 2 3 1 3",
        "output": "1"
      }
    ],
    "testCasesDisplay": [
      {
        "input": "<br>9<br>5 6 7 8 9 10 1 2 3<br>9",
        "output": "4"
      },
      {
        "input": "<br>5<br>1 2 3 4 5<br>1",
        "output": "0"
      },
      {
        "input": "<br>3<br>2 3 1<br>3",
        "output": "1"
      }
    ],
    "submitCases": [
      {
        "input": "10 12 67 80 -10 -3 -4 -6 0 4 5 80",
        "output": "2"
      },
      {
        "input": "10 3 4 5 6 7 8 9 10 1 2 7",
        "output": "4"
      },
      {
        "input": "1 1 1",
        "output": "0"
      },
      {
        "input": "7 34 35 36 0 11 22 33 0",
        "output": "3"
      },
      {
        "input": "8 5 6 7 8 1 2 3 4 5",
        "output": "0"
      },
      {
        "input": "9 60 70 80 90 10 20 30 40 50 100",
        "output": "-1"
      }
    ]
  }